{"version":3,"sources":["webpack:///./color-switch/color-script.js","webpack:///./timer/timer-script.js"],"names":["switchInterval","refs","body","document","querySelector","buttonWrapper","buttons","querySelectorAll","colors","addEventListener","e","value","target","nodeName","dataset","action","setInterval","min","max","style","backgroundColor","length","Math","floor","random","clearInterval","forEach","button","disabled","days","hours","mins","secs","selector","targetDate","this","start","timeDefinition","time","getTime","Date","now","timeCounter","pad","changeTimerContent","textContent","String","padStart"],"mappings":"2JAeIA,EAfEC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,cAAeF,SAASC,cAAc,mBACtCE,QAASH,SAASI,iBAAiB,kBAG/BC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAiCFP,EAAKI,cAAcI,iBAAiB,SAxBX,SAAUC,GAgBnC,IAA0BC,EAfE,WAAtBD,EAAEE,OAAOC,WAImB,UAA5BH,EAAEE,OAAOE,QAAQC,OACnBf,EAAiBgB,aAAY,WAVC,IAACC,EAAKC,EAWlCjB,EAAKC,KAAKiB,MAAMC,gBACdZ,GAZ2BS,EAYM,EAZDC,EAYIV,EAAOa,OAAS,EAXnDC,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,OAY/C,KACkC,SAA5BP,EAAEE,OAAOE,QAAQC,QAC1BU,cAAczB,GAKQW,EAHPD,EAAEE,OAAOE,QAAQC,OAI3Bd,EAAKK,QAAQoB,SAAQ,SAAAC,GAAM,OAChCA,EAAOb,QAAQC,SAAWJ,EACrBgB,EAAOC,UAAW,EAClBD,EAAOC,UAAW,S,cCzCrB3B,EAAO,CACX4B,KAAM1B,SAASC,cAAc,uBAC7B0B,MAAO3B,SAASC,cAAc,wBAC9B2B,KAAM5B,SAASC,cAAc,uBAC7B4B,KAAM7B,SAASC,cAAc,wBA0CjB,I,WApCZ,cAAsC,IAAxB6B,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACrBC,KAAKF,SAAWA,EAAYE,KAAKD,WAAaA,E,2BAGjDE,MAAA,WAAQ,WACND,KAAKE,iBACLrB,aAAY,WACV,EAAKqB,mBACJ,M,EAGLA,eAAA,WACE,IAAMC,EAAOH,KAAKD,WAAWK,UAAYC,KAAKC,MAC9CH,EAAO,GAAIH,KAAKO,YAAYJ,I,EAE9BI,YAAA,SAAYJ,GACV,IAAMT,EAAOM,KAAKQ,IAAIrB,KAAKC,MAAMe,EAAO,QAClCR,EAAQK,KAAKQ,IACjBrB,KAAKC,MAAOe,EAAO,MAAR,OAEPP,EAAOI,KAAKQ,IAAIrB,KAAKC,MAAOe,EAAO,KAAR,MAC3BN,EAAOG,KAAKQ,IAAIrB,KAAKC,MAAOe,EAAO,IAAe,MACxDH,KAAKS,mBAAmBf,EAAMC,EAAOC,EAAMC,I,EAE7CY,mBAAA,SAAmBf,EAAMC,EAAOC,EAAMC,GACpC/B,EAAK4B,KAAKgB,YAAchB,EACxB5B,EAAK6B,MAAMe,YAAcf,EACzB7B,EAAK8B,KAAKc,YAAcd,EACxB9B,EAAK+B,KAAKa,YAAcb,G,EAG1BW,IAAA,SAAIhC,GACF,OAAOmC,OAAOnC,GAAOoC,SAAS,EAAG,M,KAIvB,CAAmB,CAC/Bd,SAAU,WACVC,WAAY,IAAIM,KAAK,kBAGjBJ,Q","file":"main.4f25eca48c8c91655c26.js","sourcesContent":["const refs = {\r\n  body: document.querySelector('body'),\r\n  buttonWrapper: document.querySelector('.button-wrapper'),\r\n  buttons: document.querySelectorAll('[data-action]'),\r\n};\r\n\r\nconst colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nlet switchInterval;\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst switchBackground = function (e) {\r\n  if (e.target.nodeName !== 'BUTTON') {\r\n    return;\r\n  }\r\n\r\n  if (e.target.dataset.action === 'start') {\r\n    switchInterval = setInterval(() => {\r\n      refs.body.style.backgroundColor =\r\n        colors[randomIntegerFromInterval(0, colors.length - 1)];\r\n    }, 1000);\r\n  } else if (e.target.dataset.action === 'stop') {\r\n    clearInterval(switchInterval);\r\n  }\r\n  changeBtnDisable(e.target.dataset.action);\r\n};\r\n\r\nfunction changeBtnDisable(value) {\r\n  return refs.buttons.forEach(button =>\r\n    button.dataset.action === value\r\n      ? (button.disabled = true)\r\n      : (button.disabled = false),\r\n  );\r\n}\r\n\r\nrefs.buttonWrapper.addEventListener('click', switchBackground);\r\n","const refs = {\r\n  days: document.querySelector('[data-value=\"days\"]'),\r\n  hours: document.querySelector('[data-value=\"hours\"]'),\r\n  mins: document.querySelector('[data-value=\"mins\"]'),\r\n  secs: document.querySelector('[data-value=\"secs\"]'),\r\n  //   dateElementsArr: document.querySelectorAll('[data-value]'),\r\n};\r\n\r\n// console.log(refs.dateElementsArr);\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    (this.selector = selector), (this.targetDate = targetDate);\r\n    \r\n  }\r\n  start() {\r\n    this.timeDefinition();\r\n    setInterval(() => {\r\n      this.timeDefinition();\r\n    }, 1000);\r\n  }\r\n\r\n  timeDefinition() {\r\n    const time = this.targetDate.getTime() - Date.now();\r\n    time > 0 ? this.timeCounter(time) : '';\r\n  }\r\n  timeCounter(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    this.changeTimerContent(days, hours, mins, secs);\r\n  }\r\n  changeTimerContent(days, hours, mins, secs) {\r\n    refs.days.textContent = days;\r\n    refs.hours.textContent = hours;\r\n    refs.mins.textContent = mins;\r\n    refs.secs.textContent = secs;\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Aug 23, 2020'),\r\n});\r\n\r\ntimer.start()\r\n"],"sourceRoot":""}